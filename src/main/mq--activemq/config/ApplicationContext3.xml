<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	              http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
				  http://www.springframework.org/schema/context
				  http://www.springframework.org/schema/context/spring-context-3.2.xsd
				  http://www.springframework.org/schema/aop 
                  http://www.springframework.org/schema/aop/spring-aop.xsd		
                  http://www.springframework.org/schema/task
                 http://www.springframework.org/schema/task/spring-task-3.2.xsd
				 http://www.springframework.org/schema/tx 
				 http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!--第三方工厂 -->
 	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
        <property name="brokerURL" value="tcp://127.0.0.1:61616" />  
        <property name="userName" value="admin"></property>  
        <property name="password" value="admin"></property> 
        <property name="useAsyncSend" value="true" /> 
    </bean>  
      <!-- ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory   
     	   可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗,要依赖于 activemq-pool包 -->  
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">  
        <property name="connectionFactory" ref="targetConnectionFactory" />  
        <property name="maxConnections" value="100" />  
    </bean>
    
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->  
    <bean id="connectionFactory"  
        class="org.springframework.jms.connection.SingleConnectionFactory">  
         <property name="clientId" value="clientId_001" />  
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
        <property name="targetConnectionFactory" ref="pooledConnectionFactory" />  
    </bean> 
    
     <!-- queue目的地配置 -->
      <!-- <bean id="destination" class="org.apache.activemq.command.ActiveMQQueue">
         <constructor-arg index="0" value="spring-queue"/>
     </bean> -->
     <!-- topic目的地配置，其实不管是topic还是queue则他们的底层实现不同但是通过封装api就差不多了，而在spring中更是简单 -->
     <bean id="destinationTopic" class="org.apache.activemq.command.ActiveMQTopic">
         <constructor-arg index="0" value="spring-topic"/>
     </bean>
     
     <bean id="destinationTopic2" class="org.apache.activemq.command.ActiveMQTopic">
         <constructor-arg index="0" value="spring-topic2"/>
     </bean>
     <!--消息消费者 -->
    <bean id="myTopicConsumer" class="springs.activemq.Service.SimpleJMSReceiver" />  
    <!-- 消息监听器 -->  
    <bean id="myTopicListener"  
        class="org.springframework.jms.listener.adapter.MessageListenerAdapter">  
        <constructor-arg ref="myTopicConsumer" />  
        <!-- 接收消息的方法名称 -->  
        <property name="defaultListenerMethod" value="receive" />  
        <!-- 不进行消息转换 -->  
        <property name="messageConverter"><null/></property>  
    </bean>  
    
    <bean id="myListenerContainer"  
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="connectionFactory" />  
        <!-- 发布订阅模式 -->  
        <property name="pubSubDomain" value="true"/>  
        <!-- 消息持久化 -->  
        <property name="subscriptionDurable" value="true"/>  
        <property name="receiveTimeout" value="10000"/>  
        <!-- 接收者ID -->  
        <property name="clientId" value="clientId_001" />  
        <property name="durableSubscriptionName" value="clientId_001"/>  
        <property name="destination" ref="destinationTopic" />  
        <property name="messageListener" ref="myMessageListener" />  
    </bean> 
     <!-- spring 使用jmsTemplate来实现消息的发送和接受 -->
     <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
         <property name="connectionFactory" ref="connectionFactory"></property>
         <property name="defaultDestination" ref="destinationTopic"></property>
         <property name="messageConverter">
             <bean class="org.springframework.jms.support.converter.SimpleMessageConverter"/>
         </property>
        <!--  开启订阅模式 -->
         <property name="pubSubDomain" value="true"/>
     </bean>
     <!--异步监听  -->
     <bean id="myMessageListener" class ="springs.activemq.Service.MyMessageListener">
     </bean>
     <!-- <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="destinationTopic"/>
        <property name="messageListener" ref="myMessageListener"/>
        <property name="sessionAcknowledgeMode" value="1"></property>  
         <property name="subscriptionDurable" value="true"/> 
        <property name="pubSubDomain" value="true"/>
        <property name="clientId" value="clientId_001"/> 
        <property name="durableSubscriptionName" value="clientId_001"></property> 
    </bean> -->
   <!--  <bean id="jmsContainer2" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="destinationTopic2"/>
        <property name="messageListener" ref="myMessageListener"/>
        <property name="pubSubDomain" value="true"/>
          <property name="subscriptionDurable" value="true"/>  
        <property name="clientId" value="clientId_002"/> 
    </bean> -->
</beans>

